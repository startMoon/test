<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context-3.0.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.morning.star.*"/>

    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:config_center.properties"/>
    </bean>

  <!--  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="maxActive" value="50"/>
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        &lt;!&ndash; maxWait获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="60000"/>

        &lt;!&ndash; timeBetweenEvictionRunsMillis间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        &lt;!&ndash; minEvictableIdleTimeMillis一个连接在池中最小空闲的时间，单位是毫秒&ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'z'"/>
        <property name="testWhileIdle" value="true"/>

        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <property name="slowSqlMillis" value="600"/>  &lt;!&ndash; 慢sql阈值,毫秒 &ndash;&gt;
        <property name="logSlowSql" value="true"/>
    </bean>

    &lt;!&ndash; 配置JdbcTemplate &ndash;&gt;
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    &lt;!&ndash; 配置namedParameterTemplate &ndash;&gt;
    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource"/>
    </bean>

    &lt;!&ndash; DBHelper &ndash;&gt;
    <bean id="dbHelper" class="com.pugwoo.dbhelper.impl.SpringJdbcDBHelper">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
        <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate"/>
        <property name="timeoutWarningValve" value="600"/> &lt;!&ndash; 慢sql阈值,毫秒 &ndash;&gt;
    </bean>

    &lt;!&ndash; spring和MyBatis完美整合，不需要mybatis的配置映射文件 &ndash;&gt;
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    &lt;!&ndash; DAO接口所在包名，Spring会自动查找其下的类 &ndash;&gt;
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.morning.star.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>-->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.morning.star.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>

</beans>